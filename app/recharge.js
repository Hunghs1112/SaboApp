import React, { useState, useEffect, useContext } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Alert,
  Modal,
  Image,
  SafeAreaView
} from "react-native";
import api from "../constants/api";
import { useLocalSearchParams, router } from "expo-router";
import { useFocusEffect } from "@react-navigation/native"; 
import { AuthContext } from "../context/AuthContext";

export default function RechargeScreen() {
  const { userId } = useLocalSearchParams(); // L·∫•y userId t·ª´ params
  const [amount, setAmount] = useState(""); // S·ªë ti·ªÅn n·∫°p (VNƒê)
  const [addInfo, setAddInfo] = useState("nap tien"); // N·ªôi dung chuy·ªÉn ti·ªÅn
  const [showModal, setShowModal] = useState(false); // Tr·∫°ng th√°i modal QR
  const [qrCodeURL, setQrCodeURL] = useState(""); // URL QR Code
  const [exchangeRate, setExchangeRate] = useState(3500); // T·ª∑ gi√° (VNƒê -> CNY)
  const [bankDetails, setBankDetails] = useState({ bank_code: "", account_number: "" }); // Th√¥ng tin t√†i kho·∫£n ng√¢n h√†ng
  const [isButtonDisabled, setIsButtonDisabled] = useState(false); // Tr·∫°ng th√°i v√¥ hi·ªáu h√≥a n√∫t
  const { user } = useContext(AuthContext); 
  const [lastPressTime, setLastPressTime] = useState(null); // Th·ªùi gian b·∫•m n√∫t g·∫ßn nh·∫•t

  const sendTelegramMessage = async (username, userId, amount, addInfo) => {
    const botToken = "7660455671:AAFkfiTeJjviLsd_Egp0sK84cSD-mTM3cBs";
    const chatId = "-4695344815";
  
    const message = `
    üåü *Y√™u c·∫ßu n·∫°p ti·ªÅn* üåü
    - T√†i kho·∫£n: ${username}
    - User ID: ${userId}
    - S·ªë ti·ªÅn n·∫°p: ${parseInt(amount).toLocaleString()} VNƒê
    - N·ªôi dung: ${addInfo}
    `;
  
    try {
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: "Markdown", // D√πng Markdown ƒë·ªÉ l√†m n·ªïi b·∫≠t n·ªôi dung
        }),
      });
  
      if (!response.ok) {
        console.error("L·ªói g·ª≠i tin nh·∫Øn Telegram:", response.statusText);
      }
    } catch (error) {
      console.error("L·ªói khi g·ªçi API Telegram:", error);
    }
  };

  // L·∫•y th√¥ng tin ng√¢n h√†ng t·ª´ backend
  useEffect(() => {
    const fetchBankDetails = async () => {
      try {
        const response = await api.get("/bank/details");
        setBankDetails(response.data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin ng√¢n h√†ng:", error);
        Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng√¢n h√†ng.");
      }
    };

    fetchBankDetails();
  }, []);

  const handleSubmit = () => {
    if (!amount || isNaN(amount) || parseInt(amount) < 1000) {
      Alert.alert("L·ªói", "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn h·ª£p l·ªá (>= 1000).");
      return;
    }
  
    const url = `https://qrcode.io.vn/api/generate/${bankDetails.bank_code}/${bankDetails.account_number}/${parseInt(amount)}/${addInfo.replace(/\s+/g, "-")}`;
  
    setQrCodeURL(url);
    setShowModal(true);
  
    // V√¥ hi·ªáu h√≥a n√∫t "N·∫°p ti·ªÅn" trong 15 gi√¢y
    setIsButtonDisabled(true);
    setTimeout(() => {
      setIsButtonDisabled(false);
    }, 15000);
  };

  const handleConfirmTransfer = async () => {
    const currentTime = new Date().getTime(); // Th·ªùi gian hi·ªán t·∫°i (ms)
  
    // Ki·ªÉm tra n·∫øu ch∆∞a ƒë·ªß 15 gi√¢y k·ªÉ t·ª´ l·∫ßn b·∫•m cu·ªëi
    if (lastPressTime && currentTime - lastPressTime < 15000) {
      const remainingTime = 15 - Math.floor((currentTime - lastPressTime) / 1000);
      Alert.alert("Vui l√≤ng ch·ªù", `B·∫°n ph·∫£i ƒë·ª£i th√™m ${remainingTime} gi√¢y tr∆∞·ªõc khi th·ª±c hi·ªán y√™u c·∫ßu.`);
      return;
    }
  
    try {
      if (!amount || parseFloat(amount) <= 0) {
        Alert.alert("L·ªói", "S·ªë ti·ªÅn n·∫°p ph·∫£i l·ªõn h∆°n 0.");
        return;
      }
  
      const username = user.username; // Thay b·∫±ng logic l·∫•y username t·ª´ state ho·∫∑c backend
  
      const response = await api.post("/recharge/request", {
        user_id: userId, // ID ng∆∞·ªùi d√πng
        amount: parseFloat(amount), // S·ªë ti·ªÅn n·∫°p
      });
  
      if (response.status === 201) {
        setShowModal(false); // ƒê√≥ng modal
        // G·ª≠i tin nh·∫Øn ƒë·∫øn Telegram
        await sendTelegramMessage(username, userId, amount, addInfo);
  
        Alert.alert("Th√†nh c√¥ng", "Y√™u c·∫ßu n·∫°p ti·ªÅn ƒë√£ ƒë∆∞·ª£c g·ª≠i!");
       
  
        // L∆∞u th·ªùi gian b·∫•m n√∫t
        setLastPressTime(currentTime);
  
        // ƒê·ªïi tr·∫°ng th√°i n√∫t v√† h·∫πn gi·ªù 15 gi√¢y
        setIsButtonDisabled(true);
        setTimeout(() => {
          setIsButtonDisabled(false);
        }, 15000);
      } else {
        throw new Error("Kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu");
      }
    } catch (err) {
      console.error("L·ªói khi g·ª≠i y√™u c·∫ßu n·∫°p ti·ªÅn:", err);
      Alert.alert("L·ªói", "Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu.\nVui l√≤ng th·ª≠ l·∫°i.");
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={styles.title}>N·∫°p ti·ªÅn v√†o t√†i kho·∫£n</Text>
      <TextInput
        style={styles.input}
        placeholder="Nh·∫≠p s·ªë ti·ªÅn (VNƒê)"
        keyboardType="numeric"
        value={amount}
        onChangeText={setAmount}
      />

      {/* Hi·ªÉn th·ªã s·ªë ti·ªÅn quy ƒë·ªïi sang CNY */}
      {amount && (
        <Text style={styles.exchangeText}>
          T∆∞∆°ng ƒë∆∞∆°ng: {(parseFloat(amount) / exchangeRate).toFixed(2)} ¬•
        </Text>
      )}

      <TextInput
        style={styles.input}
        placeholder="N·ªôi dung chuy·ªÉn ti·ªÅn"
        value={addInfo}
        onChangeText={setAddInfo}
      />

<TouchableOpacity
  style={[
    styles.submitButton,
    isButtonDisabled && { backgroundColor: "#ddd" }, // Thay ƒë·ªïi m√†u khi b·ªã v√¥ hi·ªáu h√≥a
  ]}
  onPress={handleSubmit}
  disabled={isButtonDisabled} // V√¥ hi·ªáu h√≥a n√∫t
>
  <Text style={styles.submitButtonText}>
    {isButtonDisabled ? "Vui l√≤ng ch·ªù 15s cho y√™u c·∫ßu ti·∫øp theo" : "N·∫°p ti·ªÅn"}
  </Text>
</TouchableOpacity>

      {/* Modal QR */}
      <Modal
        visible={showModal}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowModal(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Qu√©t m√£ QR ƒë·ªÉ chuy·ªÉn kho·∫£n</Text>

            {/* Th√¥ng tin s·ªë ti·ªÅn */}
            <Text style={styles.modalText}>
              S·ªë ti·ªÅn n·∫°p: {parseInt(amount).toLocaleString()} ƒë
            </Text>
            <Text style={styles.modalText}>
              T∆∞∆°ng ƒë∆∞∆°ng: {(parseFloat(amount) / exchangeRate).toFixed(2)} ¬•
            </Text>
            <Text style={styles.modalText}>N·ªôi dung: {addInfo}</Text>

            {/* QR code */}
            {qrCodeURL && (
              <Image source={{ uri: qrCodeURL }} style={styles.qrImage} />
            )}

<TouchableOpacity
  style={styles.confirmButton}
  onPress={handleConfirmTransfer}
>
  <Text style={styles.confirmButtonText}>T√¥i ƒë√£ chuy·ªÉn kho·∫£n</Text>
</TouchableOpacity>
            <Text style={styles.infoText}>H√£y ch·ªù v√†i gi√¢y sau khi x√°c nh·∫≠n </Text>
            <Text style={styles.confirmButtonText}>H√£y ch·ªù v√†i gi√¢y sau khi x√°c nh·∫≠n </Text>
            {/* N√∫t h·ªßy */}
            <TouchableOpacity
              style={styles.cancelButton}
              onPress={() => setShowModal(false)}
            >
              <Text style={styles.cancelButtonText}>H·ªßy</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 20, backgroundColor: "#fff" },
  title: { fontSize: 20, fontWeight: "bold", marginBottom: 20 },
  input: {
    borderWidth: 1,
    borderColor: "#ddd",
    borderRadius: 8,
    padding: 10,
    fontSize: 16,
    marginBottom: 10,
  },
  exchangeText: {
    fontSize: 16,
    color: "#333",
    marginBottom: 20,
  },
  submitButton: {
    backgroundColor: "#FF5C1C",
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: "center",
    marginBottom: 20,
  },
  submitButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  modalContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: "rgba(0, 0, 0, 0.5)",
  },
  modalContent: {
    width: "80%",
    backgroundColor: "#fff",
    padding: 20,
    borderRadius: 10,
    alignItems: "center",
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  modalText: {
    fontSize: 16,
    color: "#333",
    marginBottom: 10,
    textAlign: "center",
  },
  qrImage: {
    width: 200,
    height: 200,
    marginBottom: 20,
  },
  confirmButton: {
    backgroundColor: "#4CAF50",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: "center",
    marginBottom: 10,
  },
  confirmButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  cancelButton: {
    backgroundColor: "#F44336",
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 8,
    alignItems: "center",
  },
  cancelButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  infoText:  {
    color: "black",
    fontSize: 16,
    fontWeight: "bold",
  },
});
