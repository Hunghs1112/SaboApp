import React, { useEffect, useState, useContext } from "react";
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  FlatList,
  Image,
  SafeAreaView
} from "react-native";
import api from "../constants/api";
import { AuthContext } from "../context/AuthContext";
import { useLocalSearchParams } from "expo-router";
import { useFocusEffect } from "@react-navigation/native"; // ƒê·∫£m b·∫£o import useFocusEffect
import { ScrollView } from 'react-native-virtualized-view';
export default function OrderDetailScreen() {
  const { user } = useContext(AuthContext); // L·∫•y th√¥ng tin user
  const [orderDetails, setOrderDetails] = useState(null); // Chi ti·∫øt ƒë∆°n h√†ng
  const [loading, setLoading] = useState(true);
  const { orderId, user_id } = useLocalSearchParams(); // L·∫•y c·∫£ orderId v√† user_id
 // ƒê·ªëi t∆∞·ª£ng √°nh x·∫° tr·∫°ng th√°i ti·∫øng Vi·ªát
 const statusTranslations = {
  "pending": "Xu·∫•t x∆∞·ªüng TQ",
  "shop_pending": "Qua c·ª≠a kh·∫©u",
  "shipping": "T·ªõi kho VN",
  "delivering": "Xu·∫•t kho VN",
   "completed": "Ho√†n th√†nh",
    "cancelled": "ƒê√£ h·ªßy"
};

const paymentStatusTranslations = {
  "unpaid": "Ch∆∞a thanh to√°n",
  "deposit paid": "ƒê√£ thanh to√°n c·ªçc",
  "paid": "ƒê√£ thanh to√°n",
};
const getStatusText = (status) => {
  return statusTranslations[status] || status; // Tr·∫£ v·ªÅ tr·∫°ng th√°i n·∫øu kh√¥ng t√¨m th·∫•y trong ƒë·ªëi t∆∞·ª£ng
};

const getPaymentStatusText = (paymentStatus) => {
  return paymentStatusTranslations[paymentStatus] || paymentStatus; // Tr·∫£ v·ªÅ tr·∫°ng th√°i n·∫øu kh√¥ng t√¨m th·∫•y trong ƒë·ªëi t∆∞·ª£ng
};

useFocusEffect(
  React.useCallback(() => {
    const fetchOrderDetails = async () => {
      try {
        setLoading(true);
        const response = await api.get(`/orders/details/${orderId}?user_id=${user_id}`);
        setOrderDetails(response.data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y chi ti·∫øt ƒë∆°n h√†ng:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchOrderDetails();
  }, [orderId, user_id])
);

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#FF5C1C" />
      </View>
    );
  }

  if (!orderDetails) {
    return (
      <View style={styles.container}>
        <Text style={styles.errorText}>Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë∆°n h√†ng.</Text>
      </View>
    );
  }

  return (
    <SafeAreaView style={styles.safeArea}>
    <ScrollView style={styles.container}>
      {/* Th√¥ng tin ƒë∆°n h√†ng */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Th√¥ng tin ƒë∆°n h√†ng</Text>
        <View style={styles.card}>
          <Text style={styles.infoText}>üÜî M√£ ƒë∆°n h√†ng: {orderDetails.order_id}</Text>
          <Text style={styles.infoText}>üìã Tr·∫°ng th√°i: {getStatusText(orderDetails.status)}</Text>
          <Text style={styles.infoText}>üí∞ T·ªïng ti·ªÅn: ¬•{orderDetails.total_amount}</Text>
          <Text style={styles.infoText}>
            üìÖ Ng√†y t·∫°o: {new Date(orderDetails.created_at).toLocaleDateString()}
          </Text>
        </View>
      </View>

      {/* ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>ƒê·ªãa ch·ªâ ng∆∞·ªùi nh·∫≠n</Text>
        <View style={styles.card}>
          <Text style={styles.infoText}>üë§ H·ªç v√† t√™n: {orderDetails.customer.full_name}</Text>
          <Text style={styles.infoText}>üìû S·ªë ƒëi·ªán tho·∫°i: {orderDetails.customer.phone}</Text>
          <Text style={styles.infoText}>üè† ƒê·ªãa ch·ªâ: {orderDetails.customer.address}</Text>
        </View>
      </View>

      {/* Ghi ch√∫ v√† tr·∫°ng th√°i thanh to√°n */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Th√¥ng tin b·ªï sung</Text>
        <View style={styles.card}>
          <Text style={styles.infoText}>üìù Ghi ch√∫: {orderDetails.note || "Kh√¥ng c√≥ ghi ch√∫"}</Text>
          <Text style={styles.infoText}>üí≥ Tr·∫°ng th√°i thanh to√°n: {getPaymentStatusText(orderDetails.payment_status)}</Text>
        </View>
      </View>

      {/* Danh s√°ch s·∫£n ph·∫©m */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>S·∫£n ph·∫©m trong ƒë∆°n h√†ng</Text>
        <FlatList
          data={orderDetails.items}
          keyExtractor={(item) => item.product_id}
          renderItem={({ item }) => (
            <View style={styles.productCard}>
            {/* Container bao g·ªìm ·∫£nh v√† n·ªôi dung */}
            <View style={styles.productRow}>
              {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
              <Image
                source={{ uri: item.product_image }}
                style={styles.productImage}
                resizeMode="cover"
              />
              
              {/* N·ªôi dung s·∫£n ph·∫©m */}
              <View style={styles.productInfo}>
                <Text style={styles.productName}>{item.product_name}</Text>
                <Text style={styles.productDetailText}>S·ªë l∆∞·ª£ng: {item.quantity}</Text>
                <Text style={styles.productDetailText}>Gi√° m·ªói s·∫£n ph·∫©m: ¬•{item.price}</Text>
                <View style={styles.priceContainer}>
                  <Text style={styles.totalText}>
                    T·ªïng: ¬•{(item.price * item.quantity).toFixed(2)}
                  </Text>
                </View>
              </View>
            </View>
          </View>
          )}
        />
      </View>
    </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: 'white', // ƒê·∫£m b·∫£o m√†u n·ªÅn ph√π h·ª£p
  },
  container: {
    flex: 1,
    backgroundColor: "#fff",
    paddingHorizontal: 15,
    paddingVertical: 20,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  errorText: {
    fontSize: 16,
    color: "#FF5C1C",
    textAlign: "center",
  },
  section: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#FF5C1C",
    marginBottom: 10,
  },
  card: {
    backgroundColor: "#f9f9f9",
    padding: 15,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: "#ddd",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  infoText: {
    fontSize: 16,
    color: "#333",
    marginBottom: 8,
  },
productCard: {
    backgroundColor: "#fff",
    padding: 10,
    borderRadius: 10,
    marginBottom: 10,
    borderWidth: 1,
    borderColor: "#ddd",
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  productRow: {
    flexDirection: "row", // ƒê·∫∑t h∆∞·ªõng ngang
    alignItems: "center",
  },
  productImage: {
    width: 100, // K√≠ch th∆∞·ªõc c·ªë ƒë·ªãnh cho ·∫£nh
    height: 100,
    borderRadius: 8,
    marginRight: 10, // Kho·∫£ng c√°ch gi·ªØa ·∫£nh v√† n·ªôi dung
  },
  productInfo: {
    flex: 1, // ƒê·ªÉ chi·∫øm ph·∫ßn c√≤n l·∫°i c·ªßa h√†ng
  },
  productName: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 5,
  },
  productDetailText: {
    fontSize: 14,
    color: "#666",
    marginBottom: 5,
  },
  priceContainer: {
    flexDirection: "row",
    justifyContent: "flex-start", // ƒê·ªÉ cƒÉn tr√°i t·ªïng gi√°
    marginTop: 10,
  },
  totalText: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#FF5C1C",
  },
});
